$blue: #ccccff;
$red: #d00;
$mouseover: #eee;
$black: #010101;
$white: white;
$yellow: #ffeeb1;
$buttonBarColorTop: #ffeeb1;
$buttonBarColorBottom: #ffcd09;
$uiGray: #d8d8d8;
$bodyColor: white;
$buttonTop: #eaeaea;
$buttonBottom: #dcdcdc;
$buttonBorder: #727272;

$smallPadding: 0.5rem;
$buttonBarHeight: 2rem + $smallPadding;
$buttonSidebarWidth: 21rem + $smallPadding;

@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 300;
  src: local('Roboto Light'), local('Roboto Light'), url('./fonts/Roboto-Light.woff2') format('woff2');
}

*, *::after, *::before {
  box-sizing: border-box;
}

html, body {
  margin: 0;
  padding: 0;
}

body {
  font-family: 'Roboto';
  font-size: 14px;
  color: $bodyColor;
}

a {
  color: $blue;
}

@mixin noselect {
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Safari */
  -moz-user-select: none; /* Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */
}

@mixin mouseover {
  &:hover {
    background-color: rgba(240, 240, 240, 0.3);
  }
}

@mixin yellowGradient {
  background: $buttonBarColorTop linear-gradient(180deg, $buttonBarColorTop 0%, $buttonBarColorBottom 100%);
}

@mixin buttonBarBackground {
  @include yellowGradient();
  border-bottom: 1px solid $black;
}

.app {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: rgb(52, 104, 152) linear-gradient(180deg, rgba(52, 104, 152, 1) 0%, rgba(24, 50, 76, 1) 100%);
}

.u-hidden {
  display: none;
}

.u-button-row {
  @include noselect;

  position: relative;
  z-index: 2;
  padding: $smallPadding $smallPadding 0 $smallPadding;
  height: $buttonBarHeight;
  @include buttonBarBackground;

  .u-button-row-right {
    float: right;

    .u-button {
      margin-right: 0;
      margin-left: $smallPadding;
    }
  }

  .u-button {
    margin-right: $smallPadding;
    padding: 0.2rem;
  }
}

.u-button-sidebar {
  @include noselect;
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  overflow: auto;

  z-index: 1;
  padding: $smallPadding $smallPadding 0 $smallPadding;
  width: $buttonSidebarWidth;
  @include buttonBarBackground;

  .SceneOptionsHeader {
    display: inline-block;
    margin-top: 0;
    color: $black !important;
    line-height: $buttonBarHeight;
  }

  opacity: 0;
  left: ($smallPadding*4) - $buttonSidebarWidth;
  transition: opacity 500ms ease-in-out,
  left 500ms ease-in-out;
}


.u-button-sidebar:hover {
  left: 0;
  opacity: 1;
  transition: opacity 500ms ease-in-out, left 500ms ease-in-out;
}


.u-button {
  padding: $smallPadding;
  border: 1px solid $buttonBorder;
  display: inline-block;
  color: $black !important;
  cursor: pointer;

  background: $buttonTop linear-gradient(180deg, $buttonTop 0%, $buttonBottom 100%);

  &:not(.u-disabled):hover {
    border: 1px solid $white;
  }
}

.u-fill-container {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  overflow: hidden;
}

.u-fill-image-blur {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
  filter: blur(8px);
  -webkit-filter: blur(8px);
  transform: scale(2, 2);
}

.u-abs-center {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  text-align: center;
  z-index: -1;
}

.u-float-left {
  float: left !important;
}

.u-float-right {
  float: right !important;
}

/* attributes */

.u-clickable {
  cursor: pointer;
  color: $yellow;
}

.u-disabled {
  opacity: 0.5;
  cursor: default;
}

.u-destructive {
  color: $red !important;
}

.u-destructive-bg {
  background-color: $red !important;
  color: white !important;
}

.u-edit {
  color: #444 !important;
  transform: scale(-1, 1);

  &:before {
    content: 'âœŽ';
  }
}

.u-random {
  cursor: pointer;
  font-size: 20px;

  &:before {
    content: 'ðŸŽ²';
  }
}

.u-import {
  cursor: pointer;
  font-size: 20px;

  &:before {
    content: 'ðŸ ‹';
  }
}

.u-config {
  cursor: pointer;
  font-size: 20px;

  &:before {
    content: 'âš™';
  }
}

.u-show-on-hover-only {
  border-bottom: none;
  background: rgba(0, 0, 0, 0);

  & > * {
    visibility: hidden;
  }

  &:hover {
    @include buttonBarBackground;
  }

  &:hover > * {
    visibility: visible !important;
  }
}

/* components */

.ScenePicker {
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;

  padding: $smallPadding;
  overflow: auto;

  .About {
    display: inline-block;
    width: 100%;

    > div {
      margin-bottom: $smallPadding*2;
    }

    .Header {
      h1 {
        margin: 0;
      }

      div {
        margin-left: $smallPadding;
        display: inline-block;

        &.SimpleOptionPicker {
          vertical-align: 3px;
        }
      }

      select {
        height: 1.5em;
      }
    }
  }

  .ScenePicker__Scenes {
    display: flex;
    flex-wrap: wrap;
    overflow: auto;

    & > * {
      margin-right: $smallPadding;
      height: 4rem;
      min-width: 6rem;
      max-width: 8rem;
    }
  }

  .ScenePickerItem {
    background-color: $white;
    color: $black !important;
    padding: $smallPadding * 2;
    margin-bottom: $smallPadding;

    display: flex;
    justify-content: center;
    align-items: center;

    &.m-generator {
      border: 2px solid black;
    }

    .ScenePickerItem__Title {
      text-align: center;
    }

    &:not(.u-disabled):hover {
      background-color: $buttonBottom;
    }
  }

  .ScenePicker__Buttons {
    display: inline-flex;
    width: 100%;

    div {
      display: flex;
      background-color: $white;
      color: $black !important;
      height: 4rem;
      margin-right: $smallPadding;

      justify-content: center;
      align-items: center;
      text-align: center;

      &.ScenePicker__LibraryButton {
        font-weight: bold;
        width: 70%;
      }

      &.ScenePicker__GenerateSceneButton {
        width: 18%;
        border: 2px solid black;
      }

      &.ScenePicker__AddSceneButton {
        width: 12%;
      }

      &:not(.u-disabled):hover {
        background-color: $buttonBottom;
      }
    }
  }
}

.ControlGroupGroup {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  align-content: flex-start;
}

.ControlGroup {
  flex-grow: 1;

  margin: 1em 0.5em $smallPadding * 3;

  border: 1px solid $black;
  padding: ($smallPadding * 2) $smallPadding $smallPadding $smallPadding;
  position: relative;

  color: $black;
  background-color: $uiGray;

  &.m-narrow {
    width: 300px;
  }

  &.m-wide {
    width: 100%;
  }

  .ControlGroup__Title {
    position: absolute;
    top: -1em;
    height: 1em;
    overflow: visible;
    padding: 0.15rem 0.6rem;
    font-weight: bold;
    font-size: 1rem;
    background-color: $uiGray;
    border-top: 1px solid $black;
    border-right: 1px solid $black;
    border-left: 1px solid $black;
  }
}

.ControlSubgroup {
  flex-grow: 1;

  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  align-content: flex-start;

  & > * {
    margin-right: $smallPadding * 2;
  }
}

@mixin control {
  margin-bottom: $smallPadding * 2;
  label {
    display: block;
    margin-bottom: $smallPadding;
  }
}

.SimpleOptionPicker, .SimpleTextInput, .SimpleSliderInput, .SimpleCheckbox, .SimpleColorPicker, .SimpleNumberInput {
  @include control;
}

.SimpleOptionPicker {
  select {
    max-width: 210px;
  }
}

.SimpleNumberInput {
  input[type=number] {
    font-size: 16px;
    font-weight: 400;
    display: block;
    width: 100%;
    margin-bottom: 0;
  }
}

.SimpleTextInput {
  input[type=text] {
    font-size: 16px;
    font-weight: 400;
    display: block;
    width: 100%;
    margin-bottom: 0;
  }
}

.SimpleSliderInput {
  input[type=range] {
    -webkit-appearance: none;
    width: 100%;
    height: 10px;
    border-radius: 5px;
    outline: none;
    -webkit-transition: opacity .2s ease-in-out;
    transition: opacity .2s ease-in-out;

    &:disabled {
      opacity: 0.5;
    }

    &::-webkit-slider-thumb {
      -webkit-appearance: none;
      width: 17px;
      height: 17px;
      border-radius: 50%;
      background: #3f96d0;
      cursor: pointer;
    }

    &::-moz-range-thumb {
      width: 17px;
      height: 17px;
      border-radius: 50%;
      background: #3f96d0;
      cursor: pointer;
    }
  }
}

label.SimpleCheckbox {
  display: block;

  input {
    width: 13px;
    height: 13px;
    padding: 0;
    margin: 0 $smallPadding;
    vertical-align: bottom;
    position: relative;
    top: -1px;
    *overflow: hidden;
  }

  > *:not(input) {
    margin-bottom: -2px;
  }
}

.TabbedSections {
  .TabbedSections__Content {
    border: 1px solid $black;
  }
}

.Tab {
  display: inline-block;
  padding: $smallPadding;
  border-top: 1px solid $black;
  border-right: 1px solid $black;
  margin-bottom: -1px;
  font-weight: 700;

  &:first-child {
    border-left: 1px solid $black;
  }

  &.m-active {
    background-color: $uiGray;
    border-bottom: 1px solid $uiGray;
  }

  &.m-inactive {
    background-color: lighten($uiGray, 20%);
    border-bottom: 1px solid $black;
    color: lighten($black, 20%);
    cursor: pointer;

    &:hover {
      background-color: darken($uiGray, 20%);
    }
  }
}

.TabContent {
  padding: $smallPadding;

  &.m-hidden {
    display: none;
  }
}

.ReactMultiSelectCheckboxes > div {
  > button {
    margin-top: 4px;
    height: 2em;
    padding: 0 0 0 5px;
    border-radius: 0;
    border-width: 1px;
    box-shadow: none;
    font-size: 13.3px;
    color: black;

    &:after {
      content: 'â–¼';
      font-size: 9px;
      padding-top: 3px;
      padding-right: 5px;
    }

    > span > svg {
      display: none;
    }
  }

  > div {
    margin-top: 0 !important;
    color: black;

    > div > div > div > div > input {
      vertical-align: -2px;
    }
  }
}

.SourcePicker {
  outline: none;

  .SourcePicker__Buttons {
    height: 3.2rem;

    > .SimpleOptionPicker {
      select {
        outline: none;
        margin-top: 4px;
        height: 2em;
        cursor: pointer;
      }
    }


    & > :not(.u-float-left) {
      float: right;
      margin-left: $smallPadding;
    }
  }

  .SourcePicker__Sources {
    overflow: auto;

    .SourcePicker__Source {
      padding: $smallPadding;
      line-height: 1.5rem;
      height: 2.5rem;

      @include mouseover;

      > input {
        vertical-align: -2px;
        margin-right: 10px;
      }

      .SourcePicker__SourceTitle {
        color: black !important;
        display: inline-block;
      }

      .SourcePicker__SourceTags {
        display: inline-block;

        .SourcePicker__SourceTag {
          color: $uiGray;
          padding-left: 1rem;
          font-size: 12px;
          cursor: move;
        }
      }

      .u-button {
        float: right;
        text-align: center;
        width: 1.5rem;
        height: 1.5rem;
        padding: 0;
        margin-left: 0.5rem;
        line-height: 1.5rem;
        font-weight: bold;
      }
    }

    .SourcePicker__Empty {
      text-align: center;
      padding: 1em;
    }
  }
}

.Config {
  .Config__ConfigHeader {
    display: inline-block;
    margin-top: 0;
    color: $black !important;
    line-height: $buttonBarHeight;
  }

  .Config__Content {
    position: fixed;
    top: $buttonBarHeight;
    right: 0;
    bottom: 0;
    left: 0;
    padding: $smallPadding;
    overflow: auto;
  }
}

.Library {
  .Library__LibraryHeader {
    display: inline-block;
    margin-top: 0;
    color: $black !important;
    line-height: $buttonBarHeight;
  }

  .SourcePicker {
    .SourcePicker__Buttons {
      padding: $smallPadding;
    }

    .SourcePicker__Sources {
      position: fixed;
      top: 5.5rem;
      right: 0;
      bottom: 0;
      left: 0;
      padding: $smallPadding;

      .SourcePicker__SourceTitle {
        color: white !important;
      }
    }
  }
}

.TagManager {
  .TagManager__TagManagerHeader {
    display: inline-block;
    margin-top: 0;
    color: $black !important;
    line-height: $buttonBarHeight;
  }

  .TagManager__Buttons {
    padding: $smallPadding;
    height: 3.2rem;

    & > .u-button {
      float: right;
      margin-right: $smallPadding;
    }
  }

  .TagManager__Remove, .TagManager__Empty {
    text-align: center;
    padding: 1em;
  }

  .TagManager__Tags {
    display: flex;
    flex-wrap: wrap;
    overflow: auto;
    padding: $smallPadding;

    & > * {
      margin-right: $smallPadding;
      height: 4rem;
      min-width: 6rem;
      max-width: 8rem;
    }

    .TagManager__Tag {
      background-color: $white;
      padding: $smallPadding*3;
      margin-bottom: $smallPadding;

      &.u-destructive-bg {
        color: $white !important;
      }

      &:not(.u-destructive-bg) {
        color: $black !important;
      }

      display: flex;
      justify-content: center;
      align-items: center;

      .TagManager_TagTitle {
        text-align: center;

        input {
          max-width: 7rem;
        }
      }

      &:hover {
        background-color: $buttonBottom;
      }
    }
  }
}

.SceneGenerator {
  .SceneGenerator__SceneGeneratorHeader {
    display: inline-block;
    margin-top: 0;
    color: $black !important;
    line-height: $buttonBarHeight;
  }

  .SceneNameForm {
    display: inline-block;
    width: 200px;

    input[type=text] {
      font-size: 21px;
      font-weight: 700;
      display: block;
      width: 100%;
      margin-top: 4px;
    }
  }

  .u-button-row-right {
    display: flex;

    .SimpleTextInput {
      display: flex;
      width: 75px;
      margin-bottom: 0;
      align-items: center;

      label {
        color: black !important;
        margin-right: $smallPadding;
        margin-bottom: 0;
      }
    }
  }

  .SceneGenerator__Content {
    position: fixed;
    top: $buttonBarHeight;
    right: 0;
    bottom: 0;
    left: 0;
    padding: $smallPadding;
    overflow: auto;

    .ControlGroup {
      > span {
        margin-right: 2rem;
      }

      .SimpleRadioInput {
        text-align: center;

        .SimpleRadioInput__Choice {
          margin-right: 2rem;
          cursor: pointer;
        }
      }
    }
  }
}

.SceneDetail {
  .SceneName {
    min-width: 10rem;
    min-height: 2rem;
    margin: 0;
    display: inline-block;
    margin-top: 0;
    color: $black !important;
    line-height: $buttonBarHeight;
  }

  .SceneNameForm {
    display: inline-block;
    width: 200px;

    input[type=text] {
      font-size: 21px;
      font-weight: 700;
      display: block;
      width: 100%;
      margin-top: 4px;
    }
  }

  .SceneDetail__Content {
    position: fixed;
    top: $buttonBarHeight;
    right: 0;
    bottom: 0;
    left: 0;
    padding: $smallPadding;
    overflow: auto;
  }
}

.URLImporter {
  & > .u-button {
    float: right;
    margin-top: $smallPadding;
    margin-right: $smallPadding;
  }
}

.ProgressIndicator {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  display: flex;
  align-items: center;
  justify-content: center;

  .ProgressContainer {
    width: 20rem;
    height: 20rem;
  }

  p {
    text-align: center;
  }
}

.EmptyIndicator {
  position: fixed;
  top: 50%;
  right: 0;
  left: 0;
  text-align: center;
}

.Player {
  .u-button-row {
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
  }
}

.ImagePlayer {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  .ImageView img {
    -webkit-animation-fill-mode: forwards;
    animation-fill-mode: forwards;
    -webkit-animation-timing-function: ease-out;
    animation-timing-function: ease-out;
  }
}

.SourceTags {
  @include noselect;
  position: absolute;
  display: flex;
  flex-wrap: wrap;
  height: auto;
  line-height: 1.5rem;
  width: 100%;
  align-items: center;
  justify-content: center;

  z-index: 0;
  padding: $smallPadding;
  @include buttonBarBackground;

  opacity: 0;
  bottom: -3rem;
  transition: opacity 500ms ease-in-out,
  bottom 500ms ease-in-out;

  &:hover {
    bottom: 0;
    opacity: 1;
    transition: opacity 500ms ease-in-out, bottom 500ms ease-in-out;
  }

  .SourceTag {
    background-color: $white;
    padding: $smallPadding;
    margin: $smallPadding $smallPadding 0 $smallPadding;
    color: $black !important;

    display: flex;
    justify-content: center;
    align-items: center;

    .SourceTagTitle {
      text-align: center;
    }

    &.u-selected {
      background-color: $buttonBottom;
    }

    &:hover {
      background-color: $buttonBottom;
    }
  }
}

.Modal {
  color: $black;
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: rgba(24, 24, 24, 0.3);
  z-index: 1;

  display: flex;
  align-items: center;
  justify-content: center;

  button {
    float: right;
  }
}

.Modal__Inner {
  background-color: $uiGray;
  border: 1px solid $black;
  position: relative;
  padding: $smallPadding;
  max-width: 28rem;

  $barHeight: 1.9rem;
  $buttonHeight: 1.2rem;
  $barPadding: ($barHeight - $buttonHeight) / 2;

  .Modal__Bar__Container {
    z-index: 2;
    position: absolute;
    left: -1px;
    top: -$barHeight;
    height: $barHeight;
  }

  .Modal__Bar {
    @include yellowGradient();
    height: $barHeight;
    font-weight: 700;
    font-size: 1.1rem;
    line-height: $barHeight;
    background-color: $uiGray;
    border-top: 1px solid $black;
    border-left: 1px solid $black;
    border-right: 1px solid $black;
    border-bottom: 1px solid $black;
    padding-right: $barPadding;
  }

  .Modal__Bar__Title {
    float: left;
    margin: 0 0.6rem;
  }

  .Modal__Bar__Close {
    float: left;
    cursor: pointer;
    width: $buttonHeight + 0.1rem;
    height: $buttonHeight;
    margin: $barPadding;
    border: 1px solid $black;

    &:hover {
      background-color: rgba(0, 0, 0, 0.1);
    }

    &:before {
      content: 'â•³';
      position: relative;
      bottom: 8px;
    }
  }
}

.ContextMenu {
  position: fixed;
  background: white;
  box-shadow: 0 2px 10px #999999;

  &--option {
    color: $black;
    padding: 6px 8px 5px 8px;
    min-width: 160px;
    cursor: default;
    font-size: 12px;

    &:hover {
      background: linear-gradient(to top, #555, #333);
      color: white;
    }

    &:active {
      color: #e9e9e9;
      background: linear-gradient(to top, #555, #444);
    }

    &__disabled {
      color: #999999;
      pointer-events: none;
    }
  }

  &--separator {
    width: 100%;
    height: 1px;
    background: #CCCCCC;
    margin: 0 0 0 0;
  }
}

.CaptionProgram {
  z-index: 1;
  pointer-events: none;
  display: table;
  width: 100%;
  height: 100%;

  & > div {
    display: table-cell;
  }
}

.text-blink {
  text-align: center;
  vertical-align: middle;
  transition: opacity 0.1s ease-out;
  -webkit-text-stroke-width: 1px;
  -webkit-text-stroke-color: black;
}

.text-caption {
  text-align: center;
  vertical-align: bottom;
  padding-bottom: 20vmin;
  transition: opacity 0.5s ease-in-out;
  -webkit-text-stroke-width: 1px;
  -webkit-text-stroke-color: black;
}

.text-caption-big {
  text-align: center;
  vertical-align: middle;
  transition: opacity 0.1s ease-out;
  -webkit-text-stroke-width: 1px;
  -webkit-text-stroke-color: black;
}

@each $x in -10 0 10 {
  @each $y in -10 0 10 {
    @for $z from 1 through 20 {
      .translate-#{$x}-#{$y}-#{$z}s img {
        -webkit-animation: kb-#{$x}-#{$y} #{$z}s;
        animation: kb-#{$x}-#{$y} #{$z}s;
      }

      .translate-#{$x}-#{$y}-zoom-#{$z}s img {
        -webkit-animation: kb-#{$x}-#{$y}-zoom #{$z}s;
        animation: kb-#{$x}-#{$y} #{$z}-zoom #{$z}s;
        -webkit-transform: scale(1, 1);
        transform: scale(1, 1);
      }

      .translate-#{$x}-#{$y}-zoom-out-#{$z}s img {
        -webkit-animation: kb-#{$x}-#{$y}-zoom-out #{$z}s;
        animation: kb-#{$x}-#{$y} #{$z}-zoom-out #{$z}s;
        -webkit-transform: scale(1.5, 1.5);
        transform: scale(1.5, 1.5);
      }
    }
  }
}

/* Animations */

@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@keyframes fadeOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

/* Ken Burns effects */

@each $x in -10 0 10 {
  @each $y in -10 0 10 {
    @keyframes kb-#{$x}-#{$y} {
      100% {
        transform: translate(percentage($x/100), percentage($y/100));
      }
    }

    @keyframes kb-#{$x}-#{$y}-zoom {
      100% {
        transform: translate(percentage($x*2/100), percentage($y*2/100)) scale(2, 2);
      }
    }

    @keyframes kb-#{$x}-#{$y}-zoom-out {
      100% {
        transform: translate(percentage($x/100), percentage($y/100)) scale(1, 1);
      }
    }
  }
}
